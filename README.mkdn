CSH Drink Server
===

## Dependencies

- NodeJS >= v0.8.0 
- MySQl
- MongoDB

## Installation
Install libraries (this assumes Ubuntu/debian)

``` bash
$ aptitude install make gcc g++ libldap-2.4-2 libldap2-dev uuid-dev openssl libssl-dev git git-core
```

Mongodb can be installed via 10gen's repository, so add their key and repository to ```/etc/apt/sources.list```


``` bash
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10

$ echo "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen" >> /etc/apt/sources.list

$ aptitude update

```

There are a few different versions to choose from:

- mongodb-10gen - latest stable
- mongodb18-10gen - stable 1.8 release
- mongodb20-10gen - stable 2.0 release

Lets go with the latest stable release

``` bash
$ aptitude install mongodb-10gen
```

Install Nodejs. I personally like to build it from source since it makes staying on the bleeding edge really easy.


``` bash
$ cd ~/

$ git clone https://github.com/joyent/node nodejs && cd nodejs

$ git checkout v0.8.8

$ ./configure && make && sudo make install
```

## Deploy with capistrano

Everything is now deployable via Capistrano, so you're gonna need that.

(if you dont have RVM you're a failure)

``` bash
$ rvm all do gem install capistrano capistrano-ext
```

**DRINK ADMINS**: To manage the production drink server with capistrano, you will need to add your ssh keys to the drink user.

**OTHER PEOPLE**: You can use capistrano to deploy to your own test server (downloadable drink test VM coming soon!!)

### Clone drink

You mean you havent done that already?

``` bash
$ git clone https://github.com/ComputerScienceHouse/Drink-JS.git && cd Drink-JS
```

### Setup the environment

**DRINK ADMINS**: The configs for ldap and mysql are already on the drink server in ~/configs. Capistrano is awesome and will drop them into the correct place on deploy.

**OTHER PEOPLE**: You'll need to create your own copies of the configs. Create these two below and put them in ~/configs of your dev environment.


#### config/ldap_config.js

```
exports.ldap = {
    username: "",
    password: "",
    host: "ldap://ldap.csh.rit.edu",
    version: 3
}
```

#### config/mysql_config.js

```
exports.mysql = {
    user: '',
    password: '',
    host: ''
}
```

Now we're ready to starty deploying!


First run deploy:setup for your given environment. This will create directories and install the forever node module which will be used to run the drink server.

``` bash
$ cap [develop|production] deploy:setup
```

Now pick something to deploy
``` bash
$ cap [-S branch=<branchname>] [develop|production] deploy
```

Oh, you can start and stop shit too.
``` bash
$ cap [-S branch=<branchname>] [develop|production] [dev|prod]:start

$ cap [-S branch=<branchname>] [develop|production] [dev|prod]:stop
```

To view all of the tasks in capistrano, run ```cap -T``


### Drink environment variable

The state in which drink runs (production or dev) depends on the ```$DRINK_ENV``` environment variable.

```bash
$ export DRINK_ENV=dev

$ export DRINK_ENV=prod
```

## Sunday Protocol


###USER

Command:

```
USER <username>\n
```

Response:

```
OK:\n
```

Requires: nothing

###PASS

Command:

```
PASS <password>\n
```

Response:

- Success:

```
OK: <num credits(int)>\n
```

- Failure:

```
ERR 407 Invalid password.\n
```

Requires: User must first issue the USER command

###IBUTTON

Command:

```
IBUTTON <ibutton>\n
```

Response:

- Success: 

```
OK: <num credits(int)>\n
```

- Failure: 

```
ERR 207 Invalid Ibutton\n
```

Requires: nothing

###MACHINE

Command:

```
MACHINE <machine alias>\n
```

- Machine aliases:
    - ld
    - d
    - s

Response:

- Success: 

```
OK: Welcome to <machine name(string)>\n
```

- Failure: 

```
ERR 414 Invalid machine name - USAGE: MACHINE < d | ld | s >\n
```

Requires: nothing

###STAT

Returns a new-line seperated string of slots for a selected machine.

Command:

```
STAT\n
```

Response:

- Success:

```
<slot num(int)> <slot name(string)> <slot price(int)> <num available(int)> <slot status(bool)>\n
...
OK <total slots(int)> Slots retrieved\n
```

- Failure:

```
ERR 416 Machine is offline or unreachable\n
```

Requires: A machine needs to be selected and said machine must be online.

###GETBALANCE

Returns the number of credits a user has.

Command:

```
GETBALANCE\n
```

Response:

- Success:

```
OK: <num credits(int)>\n
```

- Failure:

```
ERR 204 You need to login.\n
```

Requires: A valid, authenticated user

### DROP

Drop a drink from the current machine with a delay.

Command:

```
DROP <slot num(int)> [delay (int)]\n
```


Response:

- Success:

```
OK: Dropping drink\n
```

- Failure:

```
ERR 103 Unknown Failure.

ERR 150 Unable to initialize hardware for drop.
```

### SERVERSTAT

Get the status of the drink machines

Command:

```
SERVERSTAT\n
```


Response:

- Success:

```
{
    "machines":[
        {
            "machine_name":"<machine name>",
            "connected": <true | false>
        }...{}

    ],
    "opcode":"OK"
}
```

- Failure:

```

```
